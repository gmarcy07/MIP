// complementary_filter
/* Grant Marcy, A11182203 - 2016
* Code to Print Acceleration Data and Gyro Data to screen, and calculate Euler
* angle
*******************************************************************************/

#include <roboticscape-usefulincludes.h>
#include <roboticscape.h>

// Global Variables
float euler_gyro, eu_gyro_k, eu_gyro_k1 = 0;
float rad_angle, rangle_k, rangle_k1 = 0;

float U_low_k, U_low_k1 = 0;
float U_hi_k, U_hi_k1 = 0;

#define sample_rate 200;
float time_constant = .1;

imu_data_t data;


int print_data();
int help_ive_fallen_and_i_cant_get_up();
void* outerloop(void* ptr);
//First order high and low pass DT Filter constants.	
float a1h = -.9952;
float b1h = .9976;
float b2h = -.9976;

float a1l = -.9952;
float b1l = .002394;
float b2l = .002394;

int E_L, E_R;

float k = .8;
float b0 = -25;
float b1 = 45.09;
float b2 = -20.2;
float a1 = -1.435;
float a2 = .435;
float U_M, U_Mk1, U_MK2 = 0;
float theta, theta_ref = 0;
float P = 1;
float thetak1, thetak2, theta2k1, thetak1 = 0;
float D2_num [] = {.07512 -.0731};
float D2_den [] = {1 -.98};


float counter, counter1, inner_loop_counter, sat_counter, reset_counter = 0;
float outerloop_count = 0;
float saturation = 1;
float k2 = 10;
float K =.05;
float phi, phi_k, phi_k1, phi_ref = 0;
//threads


/*******************************************************************************
* int print_data()
* This function acts as the IMU interrupt function
*******************************************************************************/
int print_data(){
        printf("\r");
        printf(" ");
        	inner_loop_counter += 1/sample_rate;
        	counter += 1/sample_rate;
              
              //Create High-Pass filter for Reading Angles
			   euler_gyro += data.gyro[0]*DEG_TO_RAD/sample_rate;
			   eu_gyro_k1=eu_gyro_k;
			   eu_gyro_k=euler_gyro;
			   U_hi_k = b1h*eu_gyro_k+b2h*eu_gyro_k1 -a1h*U_hi_k1;

			   //Create Low Pass filter for reading angles
			   rad_angle=atan2(-data.accel[2], data.accel[1]);
			   rangle_k1=rangle_k;
			   rangle_k = rad_angle;
			   U_low_k = b1l*rangle_k + b2l*rangle_k1 - a1l*U_low_k1;

			   //March the filters by setting the new values as the
			   //new previous values
                U_low_k1=U_low_k;
                U_hi_k1 = U_hi_k;

                 
                //Get the encoder positions of the left and right wheels
                E_L = get_encoder_pos(3);
                E_R = get_encoder_pos(2);


                	//This is the outer loop thread
                	//It runs on a different time scheme, only running
                	//at 20 Hz


                	//if(inner_loop_counter >= 1/20){

                	//Set the current phi as the previous, get the new value	
                	//phi_k1=phi_k;
                	//phi_k= U_low_k+U_hi_k+.52 - (E_L+E_R)*PI/(60*35.57);
                	//Phi is a negative feedback so make it negative
                	//phi_k = - phi_k;
                	//Calculate the reference theta from the D2 difference equation
                	//theta_ref = K*(D2_num[0]*phi_k + D2_num[1]*phi_k1 - D2_den[1]*theta2k1);
                	//theta2k1 = theta_ref;

                	//Reset the counter loop so it can begin counting again before
                	//the next call to this outer loop thread
                	//inner_loop_counter = 0;
               		//}	
                	
     		   
    
                thetak2 = thetak1;
     		    thetak1 = theta;
     		    theta = theta_ref - (U_low_k+U_hi_k + .52);
                U_MK2 = U_Mk1;
                U_Mk1 = U_M;
                U_M = b0*k*theta + b1*k*thetak1 + b2*k*thetak2 - a1*U_Mk1 - a2*U_MK2;
                U_Mk1 = U_M;
                
        		//Check for Motor Saturation- if they saturate for more than
        		// a second, something has gone wrong so disable them
               
                
        
                set_motor(2, -U_M);
                set_motor(3, U_M);
               // 	}
                printf(" %5.2f ", phi_k);
                printf("% 5.2f ", theta_ref);
                printf(" %5.2f ", theta);
                printf(" %5.2f ", theta2k1);
                printf(" %5.2f ", thetak2);
                printf(" %5.2f ", U_M);
                printf(" %5.4f \n", sat_counter);
               



                fflush(stdout);
        return 0;
}




/*******************************************************************************
* int tipover()
*******************************************************************************/
/*******************************************************************************
* void d2_thread
* This is the separate thread for D2
*******************************************************************************/
void* outerloop(void* ptr){
	
//Set the current phi as the previous, get the new value
while(get_state()!=EXITING){	
	outerloop_count += 1;
		if(outerloop_count > 10){

					//Get the encoder positions of the left and right wheels
                	E_L = get_encoder_pos(3);
               		E_R = get_encoder_pos(2);
                	phi_k1=phi_k;
                	phi_k= U_low_k+U_hi_k+.52 - (E_L+E_R)*PI/(60*35.57);
                	//Phi is a negative feedback so make it negative
                	phi_k = - phi_k;
                	//Calculate the reference theta from the D2 difference equation
                	theta_ref = K*(D2_num[0]*phi_k + D2_num[1]*phi_k1 - D2_den[1]*theta2k1);
                	theta2k1 = theta_ref;

                	//Reset the counter loop so it can begin counting again before
                	//the next call to this outer loop thread
                	inner_loop_counter = 0;
               		}

               		 if(fabs(U_M) >= 1){
                		if(U_M >= 1){
                		U_M = 1;
                		}
                			else if(U_M <= 1){
                				U_M = -1;
                			}
                		
                	sat_counter =sat_counter + .005;
                	reset_counter = 0;
                		
               	}

               	//Reset the saturation counter so it is not 
               	//a running total sum of all the saturated points
               	else {
               		sat_counter = 0; reset_counter +=.005;
                	}
                //Disable motors if saturated for more than 2 
                //seconds because something has gone wrong	
                if(sat_counter > 2){
                	disable_motors();
                	printf("Motors Saturated for 2 Seconds");
                }

               	//Check for tipover
               	if(fabs(U_hi_k+U_hi_k) > PI/2) {
               		printf("The Mip has fallen Over");
               		disable_motors();
               		//set_state()=EXITING;
               	}

                if((fabs(U_low_k+U_hi_k)-0.52) > 0.5 ){
                counter1 = 0;
                phi_k = 0;
                
                		disable_motors();
                		printf("The Mip has Fallen Over");
                        }

                
                else {
                	counter1 += 1;
                }

               //	if(counter1 > 100){
                //	enable_motors();
                //	printf("Ready To Go!");
               


               	}
   return NULL;	

}

/*******************************************************************************
* int main()
Main function calls print_data to serve as the IMU Interrupt,
then prints the set readings to the screen
The print_data function is set with set_imu_interrupt

*******************************************************************************/



int main(){
        // start with default config and modify based on options
	
		//print header
		printf("Phi|");
		printf("Theta_Ref|");
		printf("Theta|");
		printf("ThetaK1|");
		printf("thetak2|");
		printf(" Set COunter");
		printf("\n");

        imu_config_t conf = get_default_imu_config();
                        conf.dmp_sample_rate=sample_rate;
                        
        // Initialize Cape
        initialize_cape();
        enable_motors();
        // Initialize IMU for DMP Interrupt Function
        initialize_imu_dmp(&data, conf);
		
        // call set_imu_interrupt_func to sample system values
        //and print the values
        //print_header();
        set_imu_interrupt_func(&print_data);
        pthread_t outerloop_thread;
		pthread_create(&outerloop_thread, NULL,outerloop, (void*) NULL);

//sleep at end of loop
        while (get_state()!=EXITING) {
        		
                //counter += 1;

            	usleep(1000000);
        }

        // For Powering off
        power_off_imu();
        cleanup_cape();
        return 0;
}
