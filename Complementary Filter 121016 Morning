// complementary_filter
/* Grant Marcy, A11182203 - 2016
* Code to Print Acceleration Data and Gyro Data to screen, and calculate Euler
* angle
*******************************************************************************/

#include <roboticscape-usefulincludes.h>
#include <roboticscape.h>

// Global Variables
float euler_gyro = 0;
float eu_gyro_k = 0;
float eu_gyro_k1 = 0;

float rad_angle = 0;
float rangle_k = 0;
float rangle_k1 = 0;
float ang_deg;

float U_low_k = 0;
float U_low_k1 = 0;
float U_hi_k = 0;
float U_hi_k1 =0;

#define sample_rate 200;
float time_constant = .1;
int show_accel=0;
int show_gyro=1;
//struct to hold new data
imu_data_t data;
float lp;
float hp;
d_filter_t low_pass, high_pass;
int print_data();
//First order high and low pass DT Filter constants.	
float a1h = -.9952;
float b1h = .9976;
float b2h = -.9976;

float a1l = -.9952;
float b1l = .002394;
float b2l = .002394;

float k = 5;
float b0 = -4.958;
float b1 = 9.6;
float b2 = -4.646;
float a1 = -1.601;
float a2 = .6003;
float U_M = 0;
float U_Mk1 = 0;
float U_MK2 = 0;
float theta = 0;
float theta_ref = 0;
float P = 1;
float thetak1, theta2k1 = 0;
float thetak2 = 0;
float D2_num [] = {.3858 -.3853};
float D2_den [] = {1 -.9277};


float counter = 0;

float k2 = 10;
float K =.03;
float phi_k;
float phi_k1 = 0;
float phi_ref = 0;

/*******************************************************************************
* int print_data()
* This function acts as the IMU interrupt function
*******************************************************************************/
int print_data(){
        printf("\r");
        printf(" ");

        	counter += 1/sample_rate;
              //  printf(" %5.2f %5.2f %5.2f\n |",        data.accel[0],
               //                                         data.accel[1],
                 //                                       data.accel[2]);

               // printf(" %5.1f %5.1f %5.1f\n |",        data.gyro[0],
               //                                         data.gyro[1],
               // 										data.gyro[2]);
			   euler_gyro += data.gyro[0]*DEG_TO_RAD/sample_rate;
			   eu_gyro_k1=eu_gyro_k;
			   eu_gyro_k=euler_gyro;

			   U_hi_k = b1h*eu_gyro_k+b2h*eu_gyro_k1 -a1h*U_hi_k1;

			   rad_angle=atan2(-data.accel[2], data.accel[1]);
			   rangle_k1=rangle_k;
			   rangle_k = rad_angle;
			   U_low_k = b1l*rangle_k + b2l*rangle_k1 - a1l*U_low_k1;

                ang_deg=rad_angle*180/PI;

                                                      
     		  lp=march_filter(&low_pass, rad_angle);
     		  hp=march_filter(&high_pass, euler_gyro);

     		    
        		/*printf(" %5.2f ", euler_gyro);
        		printf(" %5.2f ", rad_angle);
        		printf(" %5.2f ", lp);
                printf(" %5.2f ", hp);
                printf(" %5.2f ", lp+hp);
                printf(" %5.2f ", U_low_k);
                printf(" %5.2f ", U_hi_k);*/
	
                U_low_k1=U_low_k;
                U_hi_k1 = U_hi_k;

                 
                int E_L;
                int E_R;
                E_L = get_encoder_pos(3);
                E_R = get_encoder_pos(2);

               // thetak2 = thetak1;
     		   // thetak1 = theta;
     		    //theta = U_low_k+U_hi_k + .5+(phi_k);

               //if(counter > .01){
               /* 
                phi_setpoint_k1 = phi_setpoint;
                phi_c = (E_L+E_R)*PI/60;
                phi_setpoint = (theta+D2_den[1]*thetak1 - k2* D2_num[1]*phi_setpoint_k1);*/

                	phi_k1=phi_k;
                	phi_k= lp+hp+.52 - (E_L+E_R)*PI/(60*35.57);
                	phi_k = - phi_k;
                	//phi_k = -(((lp+hp)+.5)+(-E_L+E_R)*(PI/(60*35.57)));
                	theta_ref = K*(D2_num[0]*phi_k + D2_num[1]*phi_k1 - D2_den[1]*theta2k1);
                	theta2k1 = theta_ref;
                	//theta = (theta_ref - theta)*P;
                
            	//}
               // if (theta<1 && theta > -1){
                
     		   
     				
                thetak2 = thetak1;
     		    thetak1 = theta;
     		    theta = theta_ref - (U_low_k+U_hi_k + .52);
                U_MK2 = U_Mk1;
                U_Mk1 = U_M;
                U_M = b0*k*theta + b1*k*thetak1 + b2*k*thetak2 - a1*U_Mk1 - a2*U_MK2;
                U_Mk1 = U_M;
                
                
                
                set_motor(2, -U_M);
                set_motor(3, U_M);
               // 	}
                printf(" %5.2f ", phi_k);
                printf("% 5.2f ", theta_ref);
                printf(" %5.2f ", theta);
                printf(" %5.2f ", theta2k1);
                printf(" %5.2f \n", thetak2);

               



                fflush(stdout);
        return 0;
}


/*******************************************************************************
* int main()
Main function calls print_data to serve as the IMU Interrupt,
then prints the set readings to the screen
The print_data function is set with set_imu_interrupt

*******************************************************************************/
int main(){
        //int  sample_rate=10;
        // start with default config and modify based on options
		
		
		//int counter = 0;

	

	
        	
	const float dt=1/(float)sample_rate;
    low_pass = create_first_order_lowpass(dt, time_constant);
	high_pass = create_first_order_highpass(dt, time_constant);

				reset_filter(&low_pass);
				reset_filter(&high_pass);	
 			

		//print header
		printf("Phi|");
		printf("Theta_Ref|");
		printf("Theta|");
		printf("ThetaK1|");
		printf("thetak2|");
		printf("\n");

        imu_config_t conf = get_default_imu_config();
                        conf.dmp_sample_rate=sample_rate;
                        
        // Initialize Cape
        initialize_cape();
        enable_motors();
        // Initialize IMU for DMP Interrupt Function
        initialize_imu_dmp(&data, conf);

        // call set_imu_interrupt_func to sample system values
        //and print the values
        //print_header();
        set_imu_interrupt_func(&print_data);
//sleep at end of loop
        while (get_state()!=EXITING) {
        		
                //counter += 1;

            	usleep(1000000);
        }

        // For Powering off
        power_off_imu();
        cleanup_cape();
        return 0;
}
