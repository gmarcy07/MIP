// complementary_filter
* Grant Marcy, A11182203 - 2016
* Code to Print Acceleration Data and Gyro Data to screen, and calculate Euler
* angle
*******************************************************************************/

#include <roboticscape-usefulincludes.h>
#include <roboticscape.h>

// Global Variables
float euler_gyro=0;
float rad_angle;
float ang_deg;
//struct to hold new data
imu_data_t data;

int print_data();


/*******************************************************************************
* int print_data()
*
* This function acts as the IMU interrupt function
*******************************************************************************/
int print_data(){
        printf("\r");
        printf(" ");
                printf(" %5.2f %5.2f %5.2f\n |",        data.accel[0],
                                                                                data.accel[1],
                                                                                data.accel[2]);
                printf(" %5.1f %5.1f %5.1f\n |",        data.gyro[0],
                                                                                data.gyro[1],
                                                                                data.gyro[2]);


euler_gyro=euler_gyro+(1/sample_rate)*data.gyro[0];
                printf(" %5.1f \n |", euler_gyro);

                rad_angle=atan2(data.accel[2], data.accel[1]);
                ang_deg=rad_angle*180/pi;
                printf(" %5.1f \n|", rad_angle);
        return 0;
}


/*******************************************************************************
* int main()
Main function calls print_data to serve as the IMU Interrupt,
then prints the set readings to the screen
The print_data function is set with set_imu_interrupt

*******************************************************************************/
int main(){
        int  sample_rate;
        // start with default config and modify based on options
        imu_config_t conf = get_default_imu_config();

                        sample_rate =10;
                        show_accel = 1;
                        show_gyro = 1;
        // Initialize Cape
        initialize_cape()
        // Initialize IMU for DMP Interrupt Function
        (initialize_imu_dmp(&data, conf);

        // call set_imu_interrupt_func to sample system values
        //and print the values
        print_header();
        set_imu_interrupt_func(&print_data);
//sleep at end of loop
        while (get_state()!=EXITING) {
                usleep(10000);
        }

        // For Powering off
        power_off_imu();
        cleanup_cape();
        return 0;
}
