// complementary_filter
/* Grant Marcy, A11182203 - 2016
* Code to Print Acceleration Data and Gyro Data to screen, and calculate Euler
* angle
*******************************************************************************/

#include <roboticscape-usefulincludes.h>
#include <roboticscape.h>

// Global Variables
float euler_gyro=0;
float rad_angle;
float ang_deg;
#define sample_rate 100;
float time_constant = .3;
int show_accel=0;
int show_gyro=1;

//struct to hold new data
imu_data_t data;

d_filter_t low_pass, high_pass;

int print_data();


/*******************************************************************************
* int print_data()
*
* This function acts as the IMU interrupt function
*******************************************************************************/
int print_data(){
        printf("\r");
        printf(" ");
              //  printf(" %5.2f %5.2f %5.2f\n |",        data.accel[0],
               //                                         data.accel[1],
                 //                                       data.accel[2]);

               // printf(" %5.1f %5.1f %5.1f\n |",        data.gyro[0],
               //                                         data.gyro[1],
               // 										data.gyro[2]);
        	float lp;
        	float hp;
        	
			const float dt=1/(float)sample_rate;
               low_pass = create_first_order_lowpass(dt, time_constant);
			   high_pass = create_first_order_highpass(dt, time_constant);
			   euler_gyro += data.gyro[0]*DEG_TO_RAD/sample_rate;
			   rad_angle=atan2(-data.accel[2], data.accel[1]);
                ang_deg=rad_angle*180/PI;
                                                      
     		   lp=march_filter(&low_pass, rad_angle);
     		   hp=march_filter(&high_pass, euler_gyro);


        		printf(" %5.2f ", euler_gyro);
        		printf(" %5.2f ", rad_angle);
        		printf(" %5.2f ", lp);
                printf(" %5.2f ", hp);
                printf("%5.2f \n", lp+hp);

                fflush(stdout);
        return 0;
}


/*******************************************************************************
* int main()
Main function calls print_data to serve as the IMU Interrupt,
then prints the set readings to the screen
The print_data function is set with set_imu_interrupt

*******************************************************************************/
int main(){
        //int  sample_rate=10;
        // start with default config and modify based on options
		
		
		//int counter = 0;

	reset_filter(&low_pass);
	reset_filter(&high_pass); 
		


		//print header
		printf("Accelerometer |");
		printf("Gyro |");
		printf("lowpass |");
		printf("highpass |");
		printf("hi+lo |");
		printf("\n");

        imu_config_t conf = get_default_imu_config();
                        conf.dmp_sample_rate=sample_rate;
                        
        // Initialize Cape
        initialize_cape();
        // Initialize IMU for DMP Interrupt Function
        initialize_imu_dmp(&data, conf);

        // call set_imu_interrupt_func to sample system values
        //and print the values
        //print_header();
        set_imu_interrupt_func(&print_data);
//sleep at end of loop
        while (get_state()!=EXITING) {
        		
                //counter += 1;

            	usleep(1000000);
        }

        // For Powering off
        power_off_imu();
        cleanup_cape();
        return 0;
}
